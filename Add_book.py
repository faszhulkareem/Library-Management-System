#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Jan 23, 2020 12:22:20 PM IST  platform: Windows NT

import sys
from db import Database
from tkinter import messagebox

try:
    import Tkinter as tk

except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True
db = Database('database.db')


class Add_book:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("1096x782+250+5")
        top.minsize(148, 1)
        top.maxsize(1924, 1055)
        top.resizable(1, 1)
        top.title("Add Book")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.62, rely=0.038, relheight=0.55)
        self.TSeparator1.configure(orient="vertical")

        # Button Functions
        def getInfo():
            regNo = str(self.Entry1.get())
            dept = self.Entry2.get()
            # print(db.fetch_student(regNo))
            if (self.Entry1.get() == '' or self.Entry2.get() == ''):
                messagebox.showinfo("Required Fields", "Please include all fields")
                return
            else:
                for item in db.fetch_student(regNo):
                    if item[2] == regNo:
                        self.displayName.configure(text=item[1])
                        self.displayNo.configure(text=item[2])
        def displayAll():
            for row in db.fetch_book():
                self.Scrolledtreeview1.insert('', 'end', text=row[0], value=(row[1], row[2], row[3], row[4], row[5]))

        def clear_text():
            self.Entry3.delete(0, tk.END)
            self.Entry4.delete(0, tk.END)
            self.Entry5.delete(0, tk.END)
            self.Entry6.delete(0, tk.END)
            self.Entry8.delete(0, tk.END)

        def addNewBook():
            if (self.Entry1.get() == '' or self.Entry2.get() == ''):
                messagebox.showinfo("Required Fields", "Please enter Register No and Department")
                return
            elif self.Entry3.get() == '' or self.Entry4.get() == '' or self.Entry5.get() == '' or self.Entry6.get() == '' \
                    or self.Entry8.get() == '':
                messagebox.showerror("Required Fields", "Please include all fields")
                return
            else:
                db.insert_book(self.Entry3.get(), self.Entry4.get(), self.Entry5.get(), self.Entry6.get(),
                               self.Entry8.get())
                # Clear list
                records = self.Scrolledtreeview1.get_children()
                for element in records:
                    self.Scrolledtreeview1.delete(element)
                # Insert into Tree
                clear_text()
                displayAll()
        def printFile():
            print("print")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.018, rely=0.026, relheight=0.211
                          , relwidth=0.579)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Frame1)
        self.Label1.place(relx=0.047, rely=0.242, height=26, width=113)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Roll No/Staff Id:''')

        self.Entry1 = tk.Entry(self.Frame1)
        self.Entry1.place(relx=0.236, rely=0.242, height=24, relwidth=0.258)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.52, rely=0.242, height=26, width=42)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Dept.''')

        self.Entry2 = tk.Entry(self.Frame1)
        self.Entry2.place(relx=0.598, rely=0.242, height=24, relwidth=0.321)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.346, rely=0.545, height=33, width=196)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=getInfo)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Submit''')

        self.message = tk.Label(self.Frame1)
        self.message.place(relx=0.457, rely=0.788, height=26, width=6)
        self.message.configure(background="#d9d9d9")
        self.message.configure(disabledforeground="#a3a3a3")
        self.message.configure(foreground="#fc1d22")

        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(relx=0.018, rely=0.243, relheight=0.352
                               , relwidth=0.584)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Enter Book Details''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")

        self.Label3 = tk.Label(self.Labelframe1)
        self.Label3.place(relx=0.063, rely=0.145, height=26, width=84
                          , bordermode='ignore')
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Book Name''')

        self.Label4 = tk.Label(self.Labelframe1)
        self.Label4.place(relx=0.063, rely=0.255, height=26, width=57
                          , bordermode='ignore')
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Book Id''')

        self.Label5 = tk.Label(self.Labelframe1)
        self.Label5.place(relx=0.063, rely=0.364, height=26, width=51
                          , bordermode='ignore')
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Author''')

        self.Label6 = tk.Label(self.Labelframe1)
        self.Label6.place(relx=0.063, rely=0.473, height=26, width=66
                          , bordermode='ignore')
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''Publisher''')

        self.Label8 = tk.Label(self.Labelframe1)
        self.Label8.place(relx=0.063, rely=0.582, height=26, width=53
                          , bordermode='ignore')
        self.Label8.configure(activebackground="#f9f9f9")
        self.Label8.configure(activeforeground="black")
        self.Label8.configure(background="#d9d9d9")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(highlightbackground="#d9d9d9")
        self.Label8.configure(highlightcolor="black")
        self.Label8.configure(text='''Edition''')

        self.Entry3 = tk.Entry(self.Labelframe1)
        self.Entry3.place(relx=0.297, rely=0.145, height=24, relwidth=0.319
                          , bordermode='ignore')
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(highlightbackground="#d9d9d9")
        self.Entry3.configure(highlightcolor="black")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(selectbackground="#c4c4c4")
        self.Entry3.configure(selectforeground="black")

        self.Entry4 = tk.Entry(self.Labelframe1)
        self.Entry4.place(relx=0.297, rely=0.255, height=24, relwidth=0.319
                          , bordermode='ignore')
        self.Entry4.configure(background="white")
        self.Entry4.configure(disabledforeground="#a3a3a3")
        self.Entry4.configure(font="TkFixedFont")
        self.Entry4.configure(foreground="#000000")
        self.Entry4.configure(highlightbackground="#d9d9d9")
        self.Entry4.configure(highlightcolor="black")
        self.Entry4.configure(insertbackground="black")
        self.Entry4.configure(selectbackground="#c4c4c4")
        self.Entry4.configure(selectforeground="black")

        self.Entry5 = tk.Entry(self.Labelframe1)
        self.Entry5.place(relx=0.297, rely=0.364, height=24, relwidth=0.319
                          , bordermode='ignore')
        self.Entry5.configure(background="white")
        self.Entry5.configure(disabledforeground="#a3a3a3")
        self.Entry5.configure(font="TkFixedFont")
        self.Entry5.configure(foreground="#000000")
        self.Entry5.configure(highlightbackground="#d9d9d9")
        self.Entry5.configure(highlightcolor="black")
        self.Entry5.configure(insertbackground="black")
        self.Entry5.configure(selectbackground="#c4c4c4")
        self.Entry5.configure(selectforeground="black")

        self.Entry6 = tk.Entry(self.Labelframe1)
        self.Entry6.place(relx=0.297, rely=0.473, height=24, relwidth=0.319
                          , bordermode='ignore')
        self.Entry6.configure(background="white")
        self.Entry6.configure(disabledforeground="#a3a3a3")
        self.Entry6.configure(font="TkFixedFont")
        self.Entry6.configure(foreground="#000000")
        self.Entry6.configure(highlightbackground="#d9d9d9")
        self.Entry6.configure(highlightcolor="black")
        self.Entry6.configure(insertbackground="black")
        self.Entry6.configure(selectbackground="#c4c4c4")
        self.Entry6.configure(selectforeground="black")

        self.Entry8 = tk.Entry(self.Labelframe1)
        self.Entry8.place(relx=0.297, rely=0.582, height=24, relwidth=0.319
                          , bordermode='ignore')
        self.Entry8.configure(background="white")
        self.Entry8.configure(disabledforeground="#a3a3a3")
        self.Entry8.configure(font="TkFixedFont")
        self.Entry8.configure(foreground="#000000")
        self.Entry8.configure(highlightbackground="#d9d9d9")
        self.Entry8.configure(highlightcolor="black")
        self.Entry8.configure(insertbackground="black")
        self.Entry8.configure(selectbackground="#c4c4c4")
        self.Entry8.configure(selectforeground="black")

        self.Button2 = tk.Button(self.Labelframe1)
        self.Button2.place(relx=0.063, rely=0.764, height=43, width=356
                           , bordermode='ignore')
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(command=addNewBook)
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Add Book''')

        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(relx=0.639, rely=0.013, relheight=0.582
                               , relwidth=0.347)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''Student/Staff Details''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")

        self.Label9 = tk.Label(self.Labelframe2)
        self.Label9.place(relx=0.026, rely=0.176, height=37, width=78
                          , bordermode='ignore')
        self.Label9.configure(activebackground="#f9f9f9")
        self.Label9.configure(activeforeground="black")
        self.Label9.configure(background="#d9d9d9")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(font="-family {Segoe UI} -size 14")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="black")
        self.Label9.configure(text='''Name :''')

        self.displayName = tk.Label(self.Labelframe2)
        self.displayName.place(relx=0.289, rely=0.18, height=36, width=252
                               , bordermode='ignore')
        self.displayName.configure(activebackground="#f9f9f9")
        self.displayName.configure(activeforeground="black")
        self.displayName.configure(background="#d9d9d9")
        self.displayName.configure(disabledforeground="#a3a3a3")
        self.displayName.configure(font="-family {Segoe UI} -size 14")
        self.displayName.configure(foreground="#000000")
        self.displayName.configure(highlightbackground="#d9d9d9")
        self.displayName.configure(highlightcolor="black")
        self.displayName.configure(text=' ')

        self.Label10 = tk.Label(self.Labelframe2)
        self.Label10.place(relx=0.026, rely=0.374, height=37, width=131
                           , bordermode='ignore')
        self.Label10.configure(activebackground="#f9f9f9")
        self.Label10.configure(activeforeground="black")
        self.Label10.configure(background="#d9d9d9")
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(font="-family {Segoe UI} -size 14")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(highlightbackground="#d9d9d9")
        self.Label10.configure(highlightcolor="black")
        self.Label10.configure(text='''Register No:''')

        self.displayNo = tk.Label(self.Labelframe2)
        self.displayNo.place(relx=0.421, rely=0.374, height=26, width=202
                             , bordermode='ignore')
        self.displayNo.configure(activebackground="#f9f9f9")
        self.displayNo.configure(activeforeground="black")
        self.displayNo.configure(background="#d9d9d9")
        self.displayNo.configure(font="-family {Segoe UI} -size 14")
        self.displayNo.configure(disabledforeground="#a3a3a3")
        self.displayNo.configure(foreground="#000000")
        self.displayNo.configure(highlightbackground="#d9d9d9")
        self.displayNo.configure(highlightcolor="black")
        self.displayNo.configure(text='')

        self.style.configure('Treeview', font="TkDefaultFont")
        self.Scrolledtreeview1 = ScrolledTreeView(top)
        self.Scrolledtreeview1.place(relx=0.018, rely=0.614, relheight=0.303
                                     , relwidth=0.972)
        self.Scrolledtreeview1.configure(columns="Col1 Col2 Col3 Col4 Col5")
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0", text="S.No")
        self.Scrolledtreeview1.heading("#0", anchor="center")
        self.Scrolledtreeview1.column("#0", width="110")
        self.Scrolledtreeview1.column("#0", minwidth="20")
        self.Scrolledtreeview1.column("#0", stretch="1")
        self.Scrolledtreeview1.column("#0", anchor="w")
        self.Scrolledtreeview1.heading("Col1", text="Book Name")
        self.Scrolledtreeview1.heading("Col1", anchor="center")
        self.Scrolledtreeview1.column("Col1", width="260")
        self.Scrolledtreeview1.column("Col1", minwidth="20")
        self.Scrolledtreeview1.column("Col1", stretch="1")
        self.Scrolledtreeview1.column("Col1", anchor="w")
        self.Scrolledtreeview1.heading("Col2", text="Book Id")
        self.Scrolledtreeview1.heading("Col2", anchor="center")
        self.Scrolledtreeview1.column("Col2", width="139")
        self.Scrolledtreeview1.column("Col2", minwidth="20")
        self.Scrolledtreeview1.column("Col2", stretch="1")
        self.Scrolledtreeview1.column("Col2", anchor="w")
        self.Scrolledtreeview1.heading("Col3", text="Author")
        self.Scrolledtreeview1.heading("Col3", anchor="center")
        self.Scrolledtreeview1.column("Col3", width="178")
        self.Scrolledtreeview1.column("Col3", minwidth="20")
        self.Scrolledtreeview1.column("Col3", stretch="1")
        self.Scrolledtreeview1.column("Col3", anchor="w")
        self.Scrolledtreeview1.heading("Col4", text="Publisher")
        self.Scrolledtreeview1.heading("Col4", anchor="center")
        self.Scrolledtreeview1.column("Col4", width="179")
        self.Scrolledtreeview1.column("Col4", minwidth="20")
        self.Scrolledtreeview1.column("Col4", stretch="1")
        self.Scrolledtreeview1.column("Col4", anchor="w")
        self.Scrolledtreeview1.heading("Col5", text="Edition")
        self.Scrolledtreeview1.heading("Col5", anchor="center")
        self.Scrolledtreeview1.column("Col5", width="179")
        self.Scrolledtreeview1.column("Col5", minwidth="20")
        self.Scrolledtreeview1.column("Col5", stretch="1")
        self.Scrolledtreeview1.column("Col5", anchor="w")

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.684, rely=0.934, height=33, width=156)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Print''')
        self.Button3.configure(command=printFile)

        self.Button4 = tk.Button(top)
        self.Button4.place(relx=0.849, rely=0.934, height=33, width=146)
        self.Button4.configure(activebackground="#ececec")
        self.Button4.configure(activeforeground="#000000")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="#000000")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="black")
        self.Button4.configure(pady="0")
        self.Button4.configure(text='''Exit''')
        self.Button4.configure(command= quit())

    # The following code is added to facilitate the Scrolled widgets you specified.


class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')